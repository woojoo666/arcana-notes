#################################################################
## Iro
################################################################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
## test code:

## (a,b >> c+d) (e,f >> g+h)
## foo: (bar: -1+x*2/y, x: 10, y: 3)
## clone: foo(x: 15)
## barAlias: clone.bar
## sum: a,b >>
##     result: a+b
##    str: "hello world"
##    c,d >>
## item, item2
##
##   binaryTreeHeight: tree >>
##      tag #height.           // declare a tag, which can be used to attach attributes to objects
##
##      // calculate height of all nodes
##      for node in tree.nodes:
##         node.#height: Math.max(node.left.#height | 0, node.right.#height | 0) + 1
##
##      => tree.#height   // return height of root node

## TODO: the "nodes" in "tree.nodes" is highlighted as a .declaration

##
################################################################

name                   = mysample
file_extensions []     = mysample;

################################################################
## Constants
################################################################

__SYMBOL \= (\b[A-Za-z_]\w*)

################################################################
## Styles
################################################################

styles [] {

.comment : style {
   color                 = grey
   italic                = true
   ace_scope             = comment
   textmate_scope        = comment
   pygments_scope        = Comment
}

.declaration : style {
   color     = light_green
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.identifier : style {
   color     = white
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.tagword : style {
   color     = cyan
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.keyword : style {
   color     = red_2
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.braces : style {
   color                 = white
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.arguments : style {
   color     = orange
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.numeric : style {
   color                 = violet
   ace_scope             = constant.numeric
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}

.operator : style {
   color     = red_2
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.punctuation : style {
   color     = white
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.text : style {
   color                 = gold
   ace_scope             = text
   textmate_scope        = text
   pygments_scope        = String
}

.illegal : style {
   color                 = white
   background_color      = red
   ace_scope             = invalid
   textmate_scope        = invalid
   pygments_scope        = Generic.Error
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {
   
   : inline_push {
      regex          \= (\b(for|while|do|if|else)\b)
      styles []       = .keyword;
      : pop {
         regex       \= (\:)
         styles []    = .punctuation;
      }
      : include "main" ;
   }
   
   : pattern {
      regex          \= (\b(else|in|of|tag)\b)
      styles []       = .keyword;
   }

   : pattern {
      regex          \= ($${__SYMBOL}(?=:))
      styles []       = .declaration;
   }

   : pattern {
      regex          \= (#$${__SYMBOL})
      styles []       = .tagword;
   }

   : inline_push {
      regex          \= (\()
      styles []       = .braces;
      : pop {
         regex       \= (\))
         styles []    = .braces;
      }
      : include "main" ;
   }

   : inline_push {
      regex          \= (?=([^(:]*?>>))
      styles []       = .punctuation;
      : pop {
         regex       \= (>>)
         styles []    = .punctuation;
      }
      : pattern {
         regex          \= $${__SYMBOL}
         styles []       = .arguments;
      }
   }

   : include "numeric" ;
   : include "string";

   : pattern {
      regex          \= $${__SYMBOL}
      styles []       = .identifier;
   }

   : include "multi_line_comment" ;

   : pattern {
      regex          \= (//.*)
      styles []       = .comment;
   }
   
   : pattern {
      regex          \= ([-+/*=<>|&^])
      styles []       = .operator;
   }
   
   : pattern {
      regex          \= ([,.:])
      styles []       = .punctuation;
   }

   : pattern {
      regex          \= ([^\s])
      styles []       = .illegal;
   }
}

#################################################
## End of Contexts
#################################################

string : context {
   : inline_push {
      regex          \= (\")
      styles []       = .text;
      default_style   = .text
      : pop {
         regex       \= (\")
         styles []    = .text;
      }
   }
}

###########################################
## Numeric Context
###########################################

numeric : context {
   : pattern {
      regex          \= (\b\d+)
      styles []       = .numeric;
   }
}

###########################################
## Multi Line Comment Context
###########################################

multi_line_comment : context {
   description        = multiline
   : inline_push {
      regex          \= (/\*)
      styles []       = .comment;
      default_style   = .comment
      : pop {
         regex       \= (\*/)
         styles []    = .comment;
      }
   }
}
   
}
